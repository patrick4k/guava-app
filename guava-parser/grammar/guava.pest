
OPEN_TRI = @{ "<" }
CLOSE_TRI = @{ ">" }

OP_SYMBOLS = @{
      "+"
    | "-"
    | "*"
    | "/"
    | "\\"
    | "^"
    | "="
    | "!"
    | "&"
    | "|"
    | "%"
    | ":"
    | "."
    | "?"
    | "~"
    | "while"
    | "for"
    | "if"
    | "else"
    | "switch"
    | "match"
    | OPEN_TRI
    | CLOSE_TRI
}

op = @{ OP_SYMBOLS+ }
OPREFSYMBOL = @{ "op" }
opref = @{ OPREFSYMBOL ~ op }

LET = @{ "let" }
COMMA = @{ "," }
SEMICOLON = @{ ";" }
OPEN_BRACK = @{ "[" }
CLOSE_BRACK = @{ "]" }
OPEN_BRACE = @{ "{" }
CLOSE_BRACE = @{ "}" }
OPEN_PAREN = @{ "(" }
CLOSE_PAREN = @{ ")" }

ID = @{ ASCII_ALPHA ~ (ASCII_ALPHANUMERIC | "_")* }
COMPILER_ID = @{ "$" ~ ID }
COMPILER_TAG = @{ "@" ~ (!NEWLINE ~ ANY)* ~ Nl }
Nl = { COMMENT? ~ NEWLINE }
nl = { Nl | SEMICOLON }

WHITESPACE = _{ " " | "\t" }
COMMENT = _{ "#" ~ (!NEWLINE ~ ANY)* }

DOUBLE = @{ INT ~ ("." ~ ASCII_DIGIT*)? ~ (^"e" ~ INT)? }
INT = @{ ("+" | "-")? ~ ASCII_DIGIT+ }
STRING = @{
      ASCII_ALPHA ~ "\"" ~ ANY* ~ "\""
    | "'" ~ ANY* ~ "'"
}

code = {SOI ~ nl* ~ (line ~ nl+)* ~ line? ~ nl* ~ EOI}
line = { statement | expr }

statement = { decltype | declvar | encapsScope }
decltype = { (COMPILER_TAG ~ Nl*)* ~ identifier ~ identifier+ ~ Nl* ~ encapsExpr? ~ (Nl? ~ expr | Nl* ~ encapsScope) }
declvar = { LET ~ expr }

expr = { (op* ~ atom ~ op+)* ~ op* ~ atom ~ exprTail*}

exprTail = {
      op
    | Nl* ~ (encapsExpr|encapsScope)
}

opprefix = {op ~ expr}
opsuffix = {expr ~ op}
opbinary = {expr ~ op ~ expr}
exprEncapsExpr = {expr ~ Nl* ~ (encapsExpr|encapsScope)}

identifier = { ID | OPREFSYMBOL ~ op | templateidentifier }
templateidentifier = {(ID | OPREFSYMBOL ~ op) ~ Nl* ~ OPEN_TRI ~ Nl* ~ (expr ~ Nl* ~ COMMA ~ Nl*)* ~ expr ~ Nl* ~ CLOSE_TRI}

encapsScope = { OPEN_BRACE ~ Nl* ~ (line ~ nl+)* ~ Nl* ~ CLOSE_BRACE }

encapsExpr = {
      OPEN_PAREN ~ Nl* ~ tuples ~ Nl* ~ CLOSE_PAREN
    | OPEN_BRACE ~ Nl* ~ tuples ~ Nl* ~ CLOSE_BRACE
    | OPEN_BRACK ~ Nl* ~ tuples ~ Nl* ~ CLOSE_BRACK
}

tuple = { (expr ~ Nl* ~ COMMA ~ Nl*)* ~ expr ~ Nl* }

tuples = { ((tuple ~ nl)* ~ tuple ~ Nl*)? }

atom = {
      identifier
    | COMPILER_ID
    | DOUBLE
    | INT
    | STRING
    | parenexpr
}

parenexpr = { OPEN_PAREN ~ Nl* ~ expr ~ Nl* ~ CLOSE_PAREN }
